package interfaces;

import java.sql.*;
import conexion.*;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.table.*;

public class ControlMapa extends javax.swing.JFrame {
    public static String ciudad_a_editar = "";

    String usuario, txt_area = "";
    public static DefaultTableModel model = new DefaultTableModel();
    public static DefaultTableModel model4 = new DefaultTableModel();
    Object[] fila30 = new Object[5];

    public ControlMapa() {
        initComponents();
        usuario = LogIn.usuario;
        setSize(800, 500);
        setResizable(false);
        setTitle("Control Mapa - " + usuario);
        setLocationRelativeTo(null);

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from capitanes");
            ResultSet rs = pst.executeQuery();

            Tabla_MovimientosU1 = new JTable(model);
            jScrollPane_MovimientosU1.setViewportView(Tabla_MovimientosU1);

            model.addColumn("Ciudad");
            model.addColumn("Fase Militar 1");
            model.addColumn("Destino FM1");
            model.addColumn("Fase Comercial");
            model.addColumn("Fase Militar 2");
            model.addColumn("Destino FM2");

            while (rs.next()) {
                Object[] fila = new Object[6];

                for (int i = 0; i < 6; i++) {
                    fila[0] = rs.getObject("Ciudad");
                    fila[1] = rs.getObject("Fase_Militar_1");
                    fila[2] = rs.getObject("Destino_FM1");
                    fila[3] = rs.getObject("Destino_FC");
                    fila[4] = rs.getObject("Fase_Militar_2");
                    fila[5] = rs.getObject("Destino_FM2");
                }
                model.addRow(fila);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al actualizar tabla de movimientos" + e);
        }
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from gobernadores");
            ResultSet rs = pst.executeQuery();

            Tabla_Abastecimiento = new JTable(model4);
            jScrollPane_Abastecimiento.setViewportView(Tabla_Abastecimiento);

            model4.addColumn("Ciudad");
            model4.addColumn("Estatus");
            model4.addColumn("Misión Comercial");
            model4.addColumn("Oficiales Reclutados");
            model4.addColumn("Unidades Reclutadas");

            while (rs.next()) {
                for (int i = 0; i < 5; i++) {
                    fila30[0] = rs.getObject("Ciudad");
                    fila30[1] = rs.getObject("Estatus");
                    fila30[2] = rs.getObject("Nivel_de_Mision_Comercial");
                    fila30[3] = rs.getObject("Oficiales_Reclutados");
                    fila30[4] = rs.getObject("Unidades_Reclutadas");
                }
                model4.addRow(fila30);
            }
            cn.close();

            Connection cn2 = Conexion.conectar();
            PreparedStatement pst2 = cn2.prepareStatement(
                    "select * from otros where ID = 1");
            ResultSet rs2 = pst2.executeQuery();

            while (rs2.next()) {
                jLabel_Turno.setText("Turno " + rs2.getString("Turno"));
            }
            cn2.close();

        } catch (Exception e) {
            System.err.println("Error al llenar tabla de abastecimiento: " + e);
        }
        Tabla_Abastecimiento.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = Tabla_Abastecimiento.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    ciudad_a_editar = model.getValueAt(fila_point, columna_point).toString();
                    EditarEstatusMapa editar = new EditarEstatusMapa();
                    editar.setVisible(true);
                }
            }
        });
        

        cmb_Fases.addItem("");
        cmb_Fases.addItem("Fase Militar 1");
        cmb_Fases.addItem("Fase Comercial");
        cmb_Fases.addItem("Fase Militar 2");
    }
    
    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/IconoAsistenteIndependencia.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_titulo = new javax.swing.JLabel();
        jLabel_Turno = new javax.swing.JLabel();
        jScrollPane_MovimientosU1 = new javax.swing.JScrollPane();
        Tabla_MovimientosU1 = new javax.swing.JTable();
        jButton_Actualizar = new javax.swing.JButton();
        jButton_FinDeTurno = new javax.swing.JButton();
        jButton_QueNoActualicen = new javax.swing.JButton();
        jButton_QueActualicen = new javax.swing.JButton();
        jScrollPane_Abastecimiento = new javax.swing.JScrollPane();
        Tabla_Abastecimiento = new javax.swing.JTable();
        cmb_Ciudad = new javax.swing.JComboBox<>();
        cmb_Recurso = new javax.swing.JComboBox<>();
        jButton_PrepararEnvio = new javax.swing.JButton();
        jScrollPane_Enviando = new javax.swing.JScrollPane();
        jTextArea_Enviando = new javax.swing.JTextArea();
        jButton_LimpiarEnviando = new javax.swing.JButton();
        cmb_Fases = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel_titulo.setText("Independencia: el Megajuego!");
        getContentPane().add(jLabel_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));
        getContentPane().add(jLabel_Turno, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, 90, 20));

        jScrollPane_MovimientosU1.setEnabled(false);

        Tabla_MovimientosU1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla_MovimientosU1.setEnabled(false);
        jScrollPane_MovimientosU1.setViewportView(Tabla_MovimientosU1);

        getContentPane().add(jScrollPane_MovimientosU1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 800, 190));

        jButton_Actualizar.setText("Actualizar Tabla");
        jButton_Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jButton_FinDeTurno.setText("Fin del Turno");
        jButton_FinDeTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_FinDeTurnoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_FinDeTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        jButton_QueNoActualicen.setText("Impedir que jugadores actualicen");
        jButton_QueNoActualicen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_QueNoActualicenActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_QueNoActualicen, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, -1, -1));

        jButton_QueActualicen.setText("Permitirlo");
        jButton_QueActualicen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_QueActualicenActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_QueActualicen, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, -1, -1));

        jScrollPane_Abastecimiento.setEnabled(false);

        Tabla_Abastecimiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla_Abastecimiento.setEnabled(false);
        jScrollPane_Abastecimiento.setViewportView(Tabla_Abastecimiento);

        getContentPane().add(jScrollPane_Abastecimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 400, 190));

        cmb_Ciudad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Buenos Aires", "Montevideo", "Asunción", "Santa Fé", "Córdoba", "Mendoza", "Tucumán", "Salta", "Potosí", "La Paz" }));
        getContentPane().add(cmb_Ciudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 80, -1));

        cmb_Recurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caballos", "Vacas", "Hierro", "Vino", "Yerba" }));
        getContentPane().add(cmb_Recurso, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 290, 80, -1));

        jButton_PrepararEnvio.setText("Preparar envío");
        jButton_PrepararEnvio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PrepararEnvioActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_PrepararEnvio, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 320, -1, -1));

        jTextArea_Enviando.setColumns(20);
        jTextArea_Enviando.setRows(5);
        jTextArea_Enviando.setEnabled(false);
        jScrollPane_Enviando.setViewportView(jTextArea_Enviando);

        getContentPane().add(jScrollPane_Enviando, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, 320, 100));

        jButton_LimpiarEnviando.setText("Limpiar");
        jButton_LimpiarEnviando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_LimpiarEnviandoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_LimpiarEnviando, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 290, 100, -1));

        cmb_Fases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_FasesActionPerformed(evt);
            }
        });
        getContentPane().add(cmb_Fases, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_LimpiarEnviandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_LimpiarEnviandoActionPerformed
        for (int i = 1; i <= 10; i++) {

            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement(
                        "update capitanes set Caballos_E = ?, Vacas_E = ?, Hierro_E = ?, Vino_E = ?, "
                        + "Yerba_E = ? where ID = '" + i + "'");

                pst.setInt(1, 0);
                pst.setInt(2, 0);
                pst.setInt(3, 0);
                pst.setInt(4, 0);
                pst.setInt(5, 0);
                pst.executeUpdate();
                cn.close();

            } catch (SQLException e) {
                System.err.println("Error al limpiar base de preparación de recursos para enviar desde mapa");
            }

        }
        txt_area = "";
        jTextArea_Enviando.setText(txt_area);

    }//GEN-LAST:event_jButton_LimpiarEnviandoActionPerformed

    private void jButton_PrepararEnvioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PrepararEnvioActionPerformed

        String ciudad = cmb_Ciudad.getSelectedItem().toString();
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "update capitanes set Caballos_E = ?, Vacas_E = ?, Hierro_E = ?, Vino_E = ?, "
                    + "Yerba_E = ? where Ciudad = '" + ciudad + "'");

            if ("Caballos".equals(cmb_Recurso.getSelectedItem().toString())) {
                pst.setInt(1, 1);
                pst.setInt(2, 0);
                pst.setInt(3, 0);
                pst.setInt(4, 0);
                pst.setInt(5, 0);
                pst.executeUpdate();
                txt_area = txt_area + "Enviando 1 Caballos a " + ciudad + "\n";
                jTextArea_Enviando.setText(txt_area);
            } else if ("Vacas".equals(cmb_Recurso.getSelectedItem().toString())) {
                pst.setInt(1, 0);
                pst.setInt(2, 1);
                pst.setInt(3, 0);
                pst.setInt(4, 0);
                pst.setInt(5, 0);
                pst.executeUpdate();
                txt_area = txt_area + "Enviando 1 Vacas a " + ciudad + "\n";
                jTextArea_Enviando.setText(txt_area);
            } else if ("Hierro".equals(cmb_Recurso.getSelectedItem().toString())) {
                pst.setInt(1, 0);
                pst.setInt(2, 0);
                pst.setInt(3, 1);
                pst.setInt(4, 0);
                pst.setInt(5, 0);
                pst.executeUpdate();
                txt_area = txt_area + "Enviando 1 Hierro a " + ciudad + "\n";
                jTextArea_Enviando.setText(txt_area);
            } else if ("Vino".equals(cmb_Recurso.getSelectedItem().toString())) {
                pst.setInt(1, 0);
                pst.setInt(2, 0);
                pst.setInt(3, 0);
                pst.setInt(4, 1);
                pst.setInt(5, 0);
                pst.executeUpdate();
                txt_area = txt_area + "Enviando 1 Vino a " + ciudad + "\n";
                jTextArea_Enviando.setText(txt_area);
            } else if ("Yerba".equals(cmb_Recurso.getSelectedItem().toString())) {
                pst.setInt(1, 0);
                pst.setInt(2, 0);
                pst.setInt(3, 0);
                pst.setInt(4, 0);
                pst.setInt(5, 1);
                pst.executeUpdate();
                txt_area = txt_area + "Enviando 1 Yerba a " + ciudad + "\n";
                jTextArea_Enviando.setText(txt_area);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al actualizar tabla de preparación de recursos: \n" + e);
        }

    }//GEN-LAST:event_jButton_PrepararEnvioActionPerformed

    private void jButton_FinDeTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_FinDeTurnoActionPerformed
        //Limpiar base de movimientos de capitanes
        try {
            Connection cn = Conexion.conectar();
            for(int i = 1; i <= 10; i++){
                PreparedStatement pst = cn.prepareStatement(
                    "update capitanes set Fase_Militar_1 = ?, Destino_FM1 = ?, Destino_FC = ?, "
                            + "Fase_Militar_2 = ?, Destino_FM2 = ? where ID = '"+i+"'");
                pst.setString(1, "");
                pst.setString(2, "");
                pst.setString(3, "");
                pst.setString(4, "");
                pst.setString(5, "");
                pst.executeUpdate();
            }
            cn.close();
            
        } catch (SQLException e) {
            System.err.println("Error al limpiar tabla de movimientos: "+e);
        }
        
        // Actualizar nuevos reclutamientos y esas cosas
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from gobernadores");
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model4.removeRow(0);
                for (int i = 0; i < 5; i++) {
                    fila30[0] = rs.getObject("Ciudad");
                    fila30[1] = rs.getObject("Estatus");
                    fila30[2] = rs.getObject("Nivel_de_Mision_Comercial");
                    fila30[3] = rs.getObject("Oficiales_Reclutados");
                    fila30[4] = rs.getObject("Unidades_Reclutadas");
                }
                model4.addRow(fila30);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al actualizar tabla de movimientos: " + e);
        }

        // Dar recursos. Paso 1) Tomar valores de Control Mapa (tabla capitanes)
        int[][] valores_mapa = new int[10][5];
        int[][] valores_ciudad = new int[10][5];
        int[][] valores_nuevos = new int[10][5];
        
        try {
            Connection cn = Conexion.conectar();
            for(int i = 1; i <= 10; i++){
                PreparedStatement pst = cn.prepareStatement(
                    "select * from capitanes where ID = '"+i+"'");
                ResultSet rs = pst.executeQuery();
                
                while(rs.next()){
                    for(int j = 0; j < 5; j++){
                        valores_mapa[i-1][j] = rs.getInt(j+9);
                    }    
                }
            }
            cn.close();
            /*
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 5; j++) {
                    
                System.out.print("[ " + valores_mapa[i][j] + "]");
                }
                System.out.println("");
            }
            System.out.println("");
            System.out.println("");
            System.out.println("");*/
            
            
        } catch (SQLException e) {
           System.err.println("Error al tomar recursos a enviar desde mapa: " + e);
        }
        //Paso 2. Tomar valores de Ciudad (tabla gobernadores)
        try {
            Connection cn = Conexion.conectar();
            for(int i = 1; i <= 10; i++){
                PreparedStatement pst = cn.prepareStatement(
                    "select * from gobernadores where ID = '"+i+"'");
                ResultSet rs = pst.executeQuery();
                
                while(rs.next()){
                    for(int j = 0; j < 5; j++){
                        valores_ciudad[i-1][j] = rs.getInt(j+4);
                    }    
                }
            }
            cn.close();
            /*
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 5; j++) {
                    
                System.out.print("[ " + valores_ciudad[i][j] + "]");
                }
                System.out.println("");
            }
            System.out.println("");
            System.out.println("");
            System.out.println("");*/
            
            
        } catch (SQLException e) {
           System.err.println("Error al tomar recursos a enviar desde ciudad: " + e);
        }
        //Paso 3. Suma de matrices
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 5; j++) {
                valores_nuevos[i][j] = valores_mapa[i][j] + valores_ciudad[i][j];
                //System.out.print("[ " + valores_nuevos[i][j] + "]");
            }
            //System.out.println("");
        }
        //Paso 4. Actualizar valores ciudad (tabla gobernadores)
        try {
            Connection cn = Conexion.conectar();
            for(int i = 1; i <=10; i++){
                PreparedStatement pst = cn.prepareStatement(
                    "update gobernadores set Caballos = ?, Vacas = ?, Hierro = ?, Vino = ?, Yerba = ? "
                        + "where ID = '" + i + "'");
                for(int j = 1; j <= 5; j++){
                    pst.setInt(j, valores_nuevos[i-1][j-1]);
                    
                }
                pst.executeUpdate();
            }
            cn.close();
            
        } catch (SQLException e) {
            System.err.println("Error al actualizar recursos de ciudad con los de mapa: "+e);
        }
        // Limpiar tabla de envíos (tabla capitanes)
        try {
            Connection cn = Conexion.conectar();
            for(int i = 1; i <=10; i++){
                PreparedStatement pst = cn.prepareStatement(
                    "update capitanes set Caballos_E = ?, Vacas_E = ?, Hierro_E = ?, Vino_E = ?, Yerba_E = ? "
                        + "where ID = '" + i + "'");
                for(int j = 1; j <= 5; j++){
                    pst.setInt(j, 0);
                    
                }
                pst.executeUpdate();
            }
            cn.close();
            
        } catch (SQLException e) {
            System.err.println("Error al actualizar recursos de ciudad con los de mapa: "+e);
        }
        
        //Limpiar AreaEnviando
        txt_area = "";
        jTextArea_Enviando.setText(txt_area);
        
        
    }//GEN-LAST:event_jButton_FinDeTurnoActionPerformed

    private void cmb_FasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_FasesActionPerformed

        // Cambio de fase
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "update otros set Fases_de_Mapa = ? where ID = 1");
            
            if(cmb_Fases.getSelectedItem().toString().equals("Fase Militar 1")){
                pst.setInt(1, 1);
                pst.executeUpdate();
            } else if(cmb_Fases.getSelectedItem().toString().equals("Fase Comercial")){
                pst.setInt(1, 2);
                pst.executeUpdate();
            } else if(cmb_Fases.getSelectedItem().toString().equals("Fase Militar 2")){
                pst.setInt(1, 3);
                pst.executeUpdate();
            } else {
                pst.setInt(1, 0);
                pst.executeUpdate();
            }
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al actualizar bandera de fases: " + e);
        }
        
        //Pausa a la actualización de capitanes:
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "update otros set Bandera_Mapa_Actualizacion = ? where ID = 1");
            pst.setInt(1 ,0);
            pst.executeUpdate();
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al paralizar bandera actualización: "+e);
        }


    }//GEN-LAST:event_cmb_FasesActionPerformed

    private void jButton_ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ActualizarActionPerformed
        //Actualizar Tabla Movimientos
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from capitanes");
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.removeRow(0);
                Object[] fila = new Object[6];

                fila[0] = rs.getObject("Ciudad");
                fila[1] = rs.getObject("Fase_Militar_1");
                fila[2] = rs.getObject("Destino_FM1");
                fila[3] = rs.getObject("Destino_FC");
                fila[4] = rs.getObject("Fase_Militar_2");
                fila[5] = rs.getObject("Destino_FM2");
                
                model.addRow(fila);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al actualizar tabla de movimientos: " + e);
        }
        
        ActualizarTablaRecursos();
        
        
    }//GEN-LAST:event_jButton_ActualizarActionPerformed

    private void jButton_QueNoActualicenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_QueNoActualicenActionPerformed

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "update otros set Bandera_Mapa_Actualizacion = ? where ID = 1");
            pst.setInt(1 ,0);
            pst.executeUpdate();
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al paralizar bandera actualización: "+e);
        }
        
    }//GEN-LAST:event_jButton_QueNoActualicenActionPerformed

    private void jButton_QueActualicenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_QueActualicenActionPerformed
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "update otros set Bandera_Mapa_Actualizacion = ? where ID = 1");
            pst.setInt(1 ,1);
            pst.executeUpdate();
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al liberar bandera actualización: "+e);
        }
    }//GEN-LAST:event_jButton_QueActualicenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlMapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlMapa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla_Abastecimiento;
    private javax.swing.JTable Tabla_MovimientosU1;
    private javax.swing.JComboBox<String> cmb_Ciudad;
    private javax.swing.JComboBox<String> cmb_Fases;
    private javax.swing.JComboBox<String> cmb_Recurso;
    private javax.swing.JButton jButton_Actualizar;
    private javax.swing.JButton jButton_FinDeTurno;
    private javax.swing.JButton jButton_LimpiarEnviando;
    private javax.swing.JButton jButton_PrepararEnvio;
    private javax.swing.JButton jButton_QueActualicen;
    private javax.swing.JButton jButton_QueNoActualicen;
    private javax.swing.JLabel jLabel_Turno;
    private javax.swing.JLabel jLabel_titulo;
    private javax.swing.JScrollPane jScrollPane_Abastecimiento;
    private javax.swing.JScrollPane jScrollPane_Enviando;
    private javax.swing.JScrollPane jScrollPane_MovimientosU1;
    private javax.swing.JTextArea jTextArea_Enviando;
    // End of variables declaration//GEN-END:variables

    public void ActualizarTablaRecursos(){
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select * from gobernadores");
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model4.removeRow(0);
                Object[] fila2 = new Object[5];
                for (int i = 0; i < 5; i++) {
                    fila2[0] = rs.getObject("Ciudad");
                    fila2[1] = rs.getObject("Estatus");
                    fila2[2] = rs.getObject("Nivel_de_Mision_Comercial");
                    fila2[3] = rs.getObject("Oficiales_Reclutados");
                    fila2[4] = rs.getObject("Unidades_Reclutadas");
                }
                model4.addRow(fila2);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al actualizar tabla de movimientos: " + e);
        }
    }
    
}
